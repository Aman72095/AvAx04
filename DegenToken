// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";

contract DegenToken is ERC20, Ownable, ERC20Burnable {
    struct PlayerItems {
        uint diamond;
        uint crown;
        uint silver;
        uint bronze;
    }

    mapping(address => PlayerItems) public playerItems;

    uint constant DIAMOND = 1;
    uint constant CROWN = 2;
    uint constant SILVER = 3;
    uint constant BRONZE = 4;

    event ItemRedeemed(address indexed player, uint itemId, uint price);
    event TokensTransferred(address indexed from, address indexed to, uint amt);
    event TokensBurned(address indexed account, uint amt);

    constructor(address initialOwner) ERC20("Degen", "DGN") Ownable(initialOwner) {}

    function mint(address _to, uint amt) external onlyOwner {
        _mint(_to, amt);
    }

    function transferTokens(address _to, uint amt) public {
        require(amt <= balanceOf(msg.sender), "Low degen balance");
        _transfer(msg.sender, _to, amt);
        emit TokensTransferred(msg.sender, _to, amt);
    }

    function redeemItem(uint _itemId, uint _price) public {
        require(_itemId >= DIAMOND && _itemId <= BRONZE, "Invalid item ID");
        require(balanceOf(msg.sender) >= _price, "Insufficient balance");

        if (_itemId == DIAMOND) {
            playerItems[msg.sender].diamond += 1;
        } else if (_itemId == CROWN) {
            playerItems[msg.sender].crown += 1;
        } else if (_itemId == SILVER) {
            playerItems[msg.sender].silver += 1;
        } else if (_itemId == BRONZE) {
            playerItems[msg.sender].bronze += 1;
        } else {
            revert("Invalid item ID");
        }

        _burn(msg.sender, _price);
        emit ItemRedeemed(msg.sender, _itemId, _price);
    }

    function burnTokens(uint amt) external {
        require(balanceOf(msg.sender) >= amt, "Insufficient balance");
        _burn(msg.sender, amt);
        emit TokensBurned(msg.sender, amt);
    }

    function checkBalance() external view returns (uint) {
        return balanceOf(msg.sender);
    }

    function getItemCount(address _player, uint _itemId) external view returns (uint) {
        if (_itemId == DIAMOND) {
            return playerItems[_player].diamond;
        } else if (_itemId == CROWN) {
            return playerItems[_player].crown;
        } else if (_itemId == SILVER) {
            return playerItems[_player].silver;
        } else if (_itemId == BRONZE) {
            return playerItems[_player].bronze;
        } else {
            revert("Invalid item ID");
        }
    }

    function listRedeemableItems() external pure returns (string memory) {
        return "1. Diamond = 100 DGN\n2. Crown = 200 DGN\n3. Silver = 300 DGN\n4. Bronze = 400 DGN\n";
    }

    function redeemTokens(uint256 choice) external {
        uint256 amount;

        if (choice == DIAMOND) {
            amount = 100;
        } else if (choice == CROWN) {
            amount = 200;
        } else if (choice == SILVER) {
            amount = 300;
        } else if (choice == BRONZE) {
            amount = 400;
        } else {
            revert("Invalid choice");
        }

        require(balanceOf(msg.sender) >= amount, "Insufficient Tokens Present");

        _burn(msg.sender, amount);

        if (choice == DIAMOND) {
            playerItems[msg.sender].diamond += 1;
        } else if (choice == CROWN) {
            playerItems[msg.sender].crown += 1;
        } else if (choice == SILVER) {
            playerItems[msg.sender].silver += 1;
        } else if (choice == BRONZE) {
            playerItems[msg.sender].bronze += 1;
        }

        emit ItemRedeemed(msg.sender, choice, amount);
    }
}
